"use client";

import { useState, useTransition } from "react";
import { Sparkles, Loader2, PhoneOff, Link as LinkIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { generateSummaryAction } from "@/lib/actions";
import { useToast } from "@/hooks/use-toast";

interface ControlsProps {
  onEndCall: () => void;
  role: 'host' | 'user';
  roomId: string;
}

export default function Controls({ onEndCall, role, roomId }: ControlsProps) {
  const [isPending, startTransition] = useTransition();
  const [summary, setSummary] = useState("");
  const [showSummaryDialog, setShowSummaryDialog] = useState(false);
  const { toast } = useToast();

  const handleGenerateSummary = () => {
    startTransition(async () => {
        // In a real app, you would get the transcript from the meeting service.
        const transcript = "User: How will Saturn's transit affect my career? Astrologer: With Saturn in your tenth house, you can expect a period of hard work and disciplined effort leading to significant professional growth. It's a time for laying solid foundations. User: That sounds intense. Is there anything I should watch out for? Astrologer: Be mindful of potential power struggles with authority figures. Patience and perseverance will be your greatest assets during this phase.";
        const result = await generateSummaryAction(transcript);
        setSummary(result);
        setShowSummaryDialog(true);
    });
  };

  const handleCopyLink = () => {
    const joinUrl = `${window.location.origin}/room/${roomId}?role=user`;
    navigator.clipboard.writeText(joinUrl);
    toast({
      title: "Link Copied!",
      description: "The meeting link has been copied to your clipboard.",
    });
  };

  const controlButtons = [];

  if (role === 'host') {
     controlButtons.push({
      label: "Copy Link",
      icon: <LinkIcon />,
      onClick: handleCopyLink,
      variant: "outline",
    });
    controlButtons.push({
      label: "AI Summary",
      icon: isPending ? <Loader2 className="animate-spin" /> : <Sparkles />,
      onClick: handleGenerateSummary,
      variant: "default",
      disabled: isPending,
    });
  }

  controlButtons.push({
    label: "End Call",
    icon: <PhoneOff />,
    onClick: onEndCall,
    variant: "destructive",
  });

  return (
    <>
      <TooltipProvider>
        <div className="flex justify-center items-center bg-card/80 backdrop-blur-md p-3 rounded-lg shadow-lg max-w-md mx-auto">
          <div className="flex justify-center gap-4">
            {controlButtons.map((btn, index) => (
              <Tooltip key={index}>
                <TooltipTrigger asChild>
                  <Button variant={btn.variant as any} size="lg" onClick={btn.onClick} disabled={(btn as any).disabled}>
                    {btn.icon}
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{btn.label}</p>
                </TooltipContent>
              </Tooltip>
            ))}
          </div>
        </div>
      </TooltipProvider>

      <AlertDialog open={showSummaryDialog} onOpenChange={setShowSummaryDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle className="flex items-center gap-2">
              <Sparkles className="text-accent" />
              AI Meeting Summary
            </AlertDialogTitle>
            <AlertDialogDescription>
              Here is a summary of your consultation, generated by AstroMeet AI.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <div className="prose prose-sm dark:prose-invert max-h-96 overflow-y-auto">
            <p>{summary}</p>
          </div>
          <AlertDialogFooter>
            <AlertDialogAction>Close</AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
